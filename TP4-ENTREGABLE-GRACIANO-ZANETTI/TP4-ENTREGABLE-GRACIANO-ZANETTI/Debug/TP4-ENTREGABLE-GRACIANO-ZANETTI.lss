
TP4-ENTREGABLE-GRACIANO-ZANETTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001b2  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000248  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a58  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cc  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000529  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00001ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051d  00000000  00000000  00001c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036b  00000000  00000000  000021a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002514  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  9e:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <configurarTimer0>:


//Configuracion de TIMER0

void configurarTimer0()
{	TCNT0=0;	//valor inicial de conteo
  a6:	16 bc       	out	0x26, r1	; 38
	TCCR0A|=(1<<WGM01);	//modo de conteo CTC
  a8:	84 b5       	in	r24, 0x24	; 36
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	84 bd       	out	0x24, r24	; 36
	TCCR0B|=(1<<CS01);		//registro de configuracion, prescaler 8
  ae:	85 b5       	in	r24, 0x25	; 37
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	85 bd       	out	0x25, r24	; 37
	OCR0A=155;		//(156-1)	//valor maximo de conteo con modo de ctc
  b4:	8b e9       	ldi	r24, 0x9B	; 155
  b6:	87 bd       	out	0x27, r24	; 39
	TIMSK0|=(1<<OCIE0A);				//habilitar las interrupciones del timer.
  b8:	ee e6       	ldi	r30, 0x6E	; 110
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
  c2:	08 95       	ret

000000c4 <main>:
//TIMERS
//void configurarTimer1();
void configurarTimer0();

int main(void)
{	PWM_START; //inicio pwm
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	84 b9       	out	0x04, r24	; 4
	configurarTimer0();
  ca:	0e 94 53 00 	call	0xa6	; 0xa6 <configurarTimer0>
//	configurarTimer1();
	SerialPort_Init(BR9600);   // Inicializo formato 8N1 y BAUDRATE = 9600bps
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	0e 94 bb 00 	call	0x176	; 0x176 <SerialPort_Init>
	SerialPort_TX_Enable();		// Activo el transmisor del Puerto Serie
  d4:	0e 94 c5 00 	call	0x18a	; 0x18a <SerialPort_TX_Enable>
	SerialPort_RX_Enable();			// Activo el Receptor del Puerto Serie
  d8:	0e 94 cb 00 	call	0x196	; 0x196 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable(); // habilitacion de las interrupciones del receptor
  dc:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <SerialPort_RX_Interrupt_Enable>
	sei();								// habilitacion de interrupciones globales
  e0:	78 94       	sei
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <main+0x1e>

000000e4 <PWM_update>:
}

//FUNCION DE PWM
void PWM_update(){
static uint16_t PWM_position=0;
	if (++PWM_position>=PWM_PERIOD){
  e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  e8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
  f2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
  f6:	8f 3f       	cpi	r24, 0xFF	; 255
  f8:	91 05       	cpc	r25, r1
  fa:	20 f0       	brcs	.+8      	; 0x104 <PWM_update+0x20>
		PWM_position=0;
  fc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 100:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
	if(PWM_position<PWM_DELTA){
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 10e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 112:	28 17       	cp	r18, r24
 114:	39 07       	cpc	r19, r25
 116:	20 f4       	brcc	.+8      	; 0x120 <PWM_update+0x3c>
		PWM_ON;}
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	80 62       	ori	r24, 0x20	; 32
 11c:	85 b9       	out	0x05, r24	; 5
 11e:	08 95       	ret
	else{
		PWM_OFF;	
 120:	85 b1       	in	r24, 0x05	; 5
 122:	8f 7d       	andi	r24, 0xDF	; 223
 124:	85 b9       	out	0x05, r24	; 5
 126:	08 95       	ret

00000128 <__vector_14>:
	}	
	
}

ISR(TIMER0_COMPA_vect){
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	PWM_update(PWM_DELTA);
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 72 00 	call	0xe4	; 0xe4 <PWM_update>
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	bf 91       	pop	r27
 15a:	af 91       	pop	r26
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	7f 91       	pop	r23
 162:	6f 91       	pop	r22
 164:	5f 91       	pop	r21
 166:	4f 91       	pop	r20
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <SerialPort_Init>:

}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
 176:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 17a:	96 e0       	ldi	r25, 0x06	; 6
 17c:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 180:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 184:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 188:	08 95       	ret

0000018a <SerialPort_TX_Enable>:
 18a:	e1 ec       	ldi	r30, 0xC1	; 193
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	88 60       	ori	r24, 0x08	; 8
 192:	80 83       	st	Z, r24
 194:	08 95       	ret

00000196 <SerialPort_RX_Enable>:


// Inicialización de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);
 196:	e1 ec       	ldi	r30, 0xC1	; 193
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	80 61       	ori	r24, 0x10	; 16
 19e:	80 83       	st	Z, r24
 1a0:	08 95       	ret

000001a2 <SerialPort_RX_Interrupt_Enable>:
}

void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);
 1a2:	e1 ec       	ldi	r30, 0xC1	; 193
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	80 68       	ori	r24, 0x80	; 128
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
