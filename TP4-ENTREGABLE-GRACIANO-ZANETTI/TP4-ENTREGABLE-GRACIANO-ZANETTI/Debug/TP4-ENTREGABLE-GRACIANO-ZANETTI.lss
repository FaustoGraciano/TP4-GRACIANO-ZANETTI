
TP4-ENTREGABLE-GRACIANO-ZANETTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000210  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  000002a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf2  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e7  00000000  00000000  00000ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065f  00000000  00000000  000018e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00001f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000570  00000000  00000000  00002170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a7  00000000  00000000  000026e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002a87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 83 00 	call	0x106	; 0x106 <main>
  9e:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <configurarTimer1>:
}


// Función para configurar el Timer1
void configurarTimer1() {
	 TCCR1A |= (1 << COM1A1) | (1 << COM1A0) | (1 << COM1B1) | (1 << COM1B0) | (1 << WGM10); // Modo inv
  a6:	e0 e8       	ldi	r30, 0x80	; 128
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	81 6f       	ori	r24, 0xF1	; 241
  ae:	80 83       	st	Z, r24
	TCCR1B |=(1<<WGM12) | (1<<WGM10) | (1<<CS11); // Modo 5 PWM, prescaler de 8
  b0:	e1 e8       	ldi	r30, 0x81	; 129
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8b 60       	ori	r24, 0x0B	; 11
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <configurarTimer0>:
  //	TIMSK1 |= (1 << OCIE1A) | (1 << OCIE1B); // Habilitar interrupción de comparador A y B
}
//Configuracion de TIMER0

void configurarTimer0()
{	TCNT0=0;	//valor inicial de conteo
  bc:	16 bc       	out	0x26, r1	; 38
	TCCR0A|=(1<<WGM01);	//modo de conteo CTC
  be:	84 b5       	in	r24, 0x24	; 36
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	84 bd       	out	0x24, r24	; 36
	TCCR0B|=(1<<CS01);		//registro de configuracion, prescaler 8
  c4:	85 b5       	in	r24, 0x25	; 37
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	85 bd       	out	0x25, r24	; 37
	OCR0A=155;		//(156-1)	//valor maximo de conteo con modo de ctc
  ca:	8b e9       	ldi	r24, 0x9B	; 155
  cc:	87 bd       	out	0x27, r24	; 39
	TIMSK0|=(1<<OCIE0A);				//habilitar las interrupciones del timer.
  ce:	ee e6       	ldi	r30, 0x6E	; 110
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	80 83       	st	Z, r24
  d8:	08 95       	ret

000000da <configurarUART>:

}


void configurarUART()
{ SerialPort_Init(BR9600);   // Inicializo formato 8N1 y BAUDRATE = 9600bps
  da:	87 e6       	ldi	r24, 0x67	; 103
  dc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SerialPort_Init>
  SerialPort_TX_Enable();		// Activo el transmisor del Puerto Serie
  e0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SerialPort_TX_Enable>
  SerialPort_RX_Enable();			// Activo el Receptor del Puerto Serie
  e4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SerialPort_RX_Enable>
  SerialPort_RX_Interrupt_Enable(); // habilitacion de las interrupciones del receptor
  e8:	0e 94 00 01 	call	0x200	; 0x200 <SerialPort_RX_Interrupt_Enable>
  ec:	08 95       	ret

000000ee <set_pwm>:
}


void set_pwm(uint8_t red, uint8_t green, uint8_t blue) {
	OCR0A = red;   // PB5
  ee:	87 bd       	out	0x27, r24	; 39
	OCR1B = green; // PB2
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  f6:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A = blue;  // PB1
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 100:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 104:	08 95       	ret

00000106 <main>:
//TIMERS
void configurarTimer1();
void configurarTimer0();

int main(void)
{  	DDRB |= (1<<PORTB5) | (1<<PORTB1)| (1<<PORTB2);
 106:	84 b1       	in	r24, 0x04	; 4
 108:	86 62       	ori	r24, 0x26	; 38
 10a:	84 b9       	out	0x04, r24	; 4
	configurarTimer0();
 10c:	0e 94 5e 00 	call	0xbc	; 0xbc <configurarTimer0>
	configurarTimer1();
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <configurarTimer1>
    configurarUART();
 114:	0e 94 6d 00 	call	0xda	; 0xda <configurarUART>
	sei();								// habilitacion de interrupciones globales
 118:	78 94       	sei
	       case 'B':
	       blue = pwm_value;
	       break;
       }
*/	   // Establecer el valor PWM
	   set_pwm(red, green, blue);
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11e:	4f ef       	ldi	r20, 0xFF	; 255
 120:	6f ef       	ldi	r22, 0xFF	; 255
 122:	0e 94 77 00 	call	0xee	; 0xee <set_pwm>
 126:	f9 cf       	rjmp	.-14     	; 0x11a <main+0x14>

00000128 <__vector_14>:
	OCR0A = red;   // PB5
	OCR1B = green; // PB2
	OCR1A = blue;  // PB1
}

ISR(TIMER0_COMPA_vect){
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	PWM_update();
 14a:	0e 94 b8 00 	call	0x170	; 0x170 <PWM_update>
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	bf 91       	pop	r27
 154:	af 91       	pop	r26
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	7f 91       	pop	r23
 15c:	6f 91       	pop	r22
 15e:	5f 91       	pop	r21
 160:	4f 91       	pop	r20
 162:	3f 91       	pop	r19
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <PWM_update>:


//FUNCION DE PWM
void PWM_update(){
	static uint16_t PWM_position=0;
	if (++PWM_position>=PWM_PERIOD){
 170:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 174:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 17e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 182:	8f 3f       	cpi	r24, 0xFF	; 255
 184:	91 05       	cpc	r25, r1
 186:	20 f0       	brcs	.+8      	; 0x190 <PWM_update+0x20>
		PWM_position=0;
 188:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 18c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
	if(PWM_position< red){
 190:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 19a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 19e:	28 17       	cp	r18, r24
 1a0:	39 07       	cpc	r19, r25
 1a2:	20 f4       	brcc	.+8      	; 0x1ac <PWM_update+0x3c>
	PWM_OFF;}
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	8f 7d       	andi	r24, 0xDF	; 223
 1a8:	85 b9       	out	0x05, r24	; 5
 1aa:	08 95       	ret
	else{
		PWM_ON;
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	85 b9       	out	0x05, r24	; 5
 1b2:	08 95       	ret

000001b4 <__vector_18>:

}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
 1c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1c4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <selected_color>
 1c8:	8f 91       	pop	r24
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <SerialPort_Init>:
 1d4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 1d8:	96 e0       	ldi	r25, 0x06	; 6
 1da:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1de:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1e6:	08 95       	ret

000001e8 <SerialPort_TX_Enable>:
 1e8:	e1 ec       	ldi	r30, 0xC1	; 193
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	88 60       	ori	r24, 0x08	; 8
 1f0:	80 83       	st	Z, r24
 1f2:	08 95       	ret

000001f4 <SerialPort_RX_Enable>:


// Inicialización de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);
 1f4:	e1 ec       	ldi	r30, 0xC1	; 193
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	80 61       	ori	r24, 0x10	; 16
 1fc:	80 83       	st	Z, r24
 1fe:	08 95       	ret

00000200 <SerialPort_RX_Interrupt_Enable>:
}

void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);
 200:	e1 ec       	ldi	r30, 0xC1	; 193
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	80 68       	ori	r24, 0x80	; 128
 208:	80 83       	st	Z, r24
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
